/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum FunnelStage {
  TOF = "TOF",
  MOF = "MOF",
  BOF = "BOF",
}

export enum SearchIntent {
  Informational = "Informational",
  Comparative = "Comparative",
  Transactional = "Transactional",
}

export enum TPBClassification {
  Attitude = "Attitude",
  Norm = "Norm",
  Perceived_control = "Perceived_control",
}

export interface Draft {
  frontmatter: Frontmatter
  content: string
  markdownContent?: string | null
  faqBlocks?: FAQBlock[] | null
  howtoBlocks?: HowToBlock[] | null
  
}

export interface EATSignals {
  authorBio: string
  reviewer?: string | null
  factChecked: boolean
  reviewDate: string
  
}

export interface Evidence {
  claims: string[]
  citations: string[]
  expertQuotes: string[]
  
}

export interface Expanded {
  frontmatter: Frontmatter
  content: string
  markdownContent?: string | null
  evidence: Evidence
  imagePlaceholders: ImagePlaceholder[]
  eatSignals: EATSignals
  qualityMetrics?: QualityMetrics | null
  
}

export interface FAQ {
  q?: string | null
  question?: string | null
  answer?: string | null
  a_outline?: string | null
  
}

export interface FAQBlock {
  q?: string | null
  question?: string | null
  a?: string | null
  answer?: string | null
  
}

export interface Final {
  frontmatter: Frontmatter
  content: string
  markdownContent?: string | null
  evidence: Evidence
  imagePlaceholders: ImagePlaceholder[]
  eatSignals: EATSignals
  qualityMetrics: QualityMetrics
  seoOptimizations: SEOOptimizations
  
}

export interface Frontmatter {
  title?: string | null
  description?: string | null
  slug?: string | null
  date?: string | null
  author?: string | null
  tags?: string[] | null
  category?: string | null
  funnel?: FunnelStage | null
  intent?: SearchIntent | null
  primaryKeyword?: string | null
  secondaryKeywords?: string[] | null
  wordcount?: number | null
  readingTime?: number | null
  schema?: string[] | null
  
}

export interface Heading {
  h2?: string | null
  title?: string | null
  keypoints?: string[] | null
  h3?: string[] | null
  
}

export interface HowToBlock {
  title: string
  steps: HowToStep[]
  
}

export interface HowToStep {
  step?: number | null
  position?: number | null
  description?: string | null
  instruction?: string | null
  text?: string | null
  
}

export interface ImagePlaceholder {
  altText: string
  position: string
  description: string
  
}

export interface Metadata {
  primaryKeyword: string
  secondaryKeywords: string[]
  wordcountTarget: number
  readingTime: number
  difficulty: string
  
}

export interface Outline {
  title: string
  slug: string
  cluster: string
  funnel: FunnelStage
  intent: SearchIntent
  tpb: TPBClassification
  targetReader: string
  headings: Heading[]
  faqs: FAQ[]
  metadata: Metadata
  
}

export interface Published {
  frontmatter: Frontmatter
  content: string
  markdownContent: string
  filePath: string
  backupPath: string
  validation: string
  
}

export interface QualityMetrics {
  readabilityGrade?: number | null
  fleschKincaidScore?: number | null
  averageSentenceLength?: number | null
  passiveVoicePercent?: number | null
  keywordDensity?: string | null
  brandVoiceAlignment?: string | null
  toneAlignment?: string | null
  
}

export interface SEOOptimizations {
  titleOptimized: boolean
  metaDescriptionOptimized: boolean
  schemaMarkupGenerated: boolean
  ctaIncluded: boolean
  keywordDensityOptimized: boolean
  
}
