/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {Draft, EATSignals, Evidence, Expanded, FAQ, FAQBlock, Final, Frontmatter, FunnelStage, Heading, HowToBlock, HowToStep, ImagePlaceholder, Metadata, Outline, Published, QualityMetrics, SEOOptimizations, SearchIntent, TPBClassification} from "./types"
import type TypeBuilder from "./type_builder"

type TickReason = "Unknown";

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AddTablesAndExamples(
      expanded: types.Expanded,topics: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "AddTablesAndExamples",
        {
          "expanded": expanded,"topics": topics
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExpandDraft(
      draft: types.Draft,currentLength: number,targetLength: number,currentWordCount: number,targetWordCount: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "ExpandDraft",
        {
          "draft": draft,"currentLength": currentLength,"targetLength": targetLength,"currentWordCount": currentWordCount,"targetWordCount": targetWordCount
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async FinalizeContent(
      expanded: types.Expanded,currentWordCount: number,titleLength: number,descriptionLength: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "FinalizeContent",
        {
          "expanded": expanded,"currentWordCount": currentWordCount,"titleLength": titleLength,"descriptionLength": descriptionLength
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateDraft(
      outline: types.Outline,targetWordCount: number,funnelStage: string,searchIntent: string,funnelDescription: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateDraft",
        {
          "outline": outline,"targetWordCount": targetWordCount,"funnelStage": funnelStage,"searchIntent": searchIntent,"funnelDescription": funnelDescription
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateOutline(
      topic: string,cluster: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateOutline",
        {
          "topic": topic,"cluster": cluster
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async PolishContent(
      expanded: types.Expanded,currentWordCount: number,readabilityTarget: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "PolishContent",
        {
          "expanded": expanded,"currentWordCount": currentWordCount,"readabilityTarget": readabilityTarget
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ValidateExpandedQuality(
      expanded: types.Expanded,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "ValidateExpandedQuality",
        {
          "expanded": expanded
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AddTablesAndExamples(
      expanded: types.Expanded,topics: string[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "AddTablesAndExamples",
        {
          "expanded": expanded,"topics": topics
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExpandDraft(
      draft: types.Draft,currentLength: number,targetLength: number,currentWordCount: number,targetWordCount: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "ExpandDraft",
        {
          "draft": draft,"currentLength": currentLength,"targetLength": targetLength,"currentWordCount": currentWordCount,"targetWordCount": targetWordCount
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async FinalizeContent(
      expanded: types.Expanded,currentWordCount: number,titleLength: number,descriptionLength: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "FinalizeContent",
        {
          "expanded": expanded,"currentWordCount": currentWordCount,"titleLength": titleLength,"descriptionLength": descriptionLength
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateDraft(
      outline: types.Outline,targetWordCount: number,funnelStage: string,searchIntent: string,funnelDescription: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateDraft",
        {
          "outline": outline,"targetWordCount": targetWordCount,"funnelStage": funnelStage,"searchIntent": searchIntent,"funnelDescription": funnelDescription
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateOutline(
      topic: string,cluster: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "GenerateOutline",
        {
          "topic": topic,"cluster": cluster
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async PolishContent(
      expanded: types.Expanded,currentWordCount: number,readabilityTarget: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "PolishContent",
        {
          "expanded": expanded,"currentWordCount": currentWordCount,"readabilityTarget": readabilityTarget
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ValidateExpandedQuality(
      expanded: types.Expanded,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
        "ValidateExpandedQuality",
        {
          "expanded": expanded
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}