/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Draft,  EATSignals,  Evidence,  Expanded,  FAQ,  FAQBlock,  Final,  Frontmatter,  FunnelStage,  Heading,  HowToBlock,  HowToStep,  ImagePlaceholder,  Metadata,  Outline,  Published,  QualityMetrics,  SEOOptimizations,  SearchIntent,  TPBClassification } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Draft {
      frontmatter?: Frontmatter | null
      content?: string | null
      markdownContent?: string | null
      faqBlocks?: FAQBlock[] | null
      howtoBlocks?: HowToBlock[] | null
    }
    export interface EATSignals {
      authorBio?: string | null
      reviewer?: string | null
      factChecked?: boolean | null
      reviewDate?: string | null
    }
    export interface Evidence {
      claims: string[]
      citations: string[]
      expertQuotes: string[]
    }
    export interface Expanded {
      frontmatter?: Frontmatter | null
      content?: string | null
      markdownContent?: string | null
      evidence?: Evidence | null
      imagePlaceholders: ImagePlaceholder[]
      eatSignals?: EATSignals | null
      qualityMetrics?: QualityMetrics | null
    }
    export interface FAQ {
      q?: string | null
      question?: string | null
      answer?: string | null
      a_outline?: string | null
    }
    export interface FAQBlock {
      q?: string | null
      question?: string | null
      a?: string | null
      answer?: string | null
    }
    export interface Final {
      frontmatter?: Frontmatter | null
      content?: string | null
      markdownContent?: string | null
      evidence?: Evidence | null
      imagePlaceholders: ImagePlaceholder[]
      eatSignals?: EATSignals | null
      qualityMetrics?: QualityMetrics | null
      seoOptimizations?: SEOOptimizations | null
    }
    export interface Frontmatter {
      title?: string | null
      description?: string | null
      slug?: string | null
      date?: string | null
      author?: string | null
      tags?: string[] | null
      category?: string | null
      funnel?: types.FunnelStage | null
      intent?: types.SearchIntent | null
      primaryKeyword?: string | null
      secondaryKeywords?: string[] | null
      wordcount?: number | null
      readingTime?: number | null
      schema?: string[] | null
    }
    export interface Heading {
      h2?: string | null
      title?: string | null
      keypoints?: string[] | null
      h3?: string[] | null
    }
    export interface HowToBlock {
      title?: string | null
      steps: HowToStep[]
    }
    export interface HowToStep {
      step?: number | null
      position?: number | null
      description?: string | null
      instruction?: string | null
      text?: string | null
    }
    export interface ImagePlaceholder {
      altText?: string | null
      position?: string | null
      description?: string | null
    }
    export interface Metadata {
      primaryKeyword?: string | null
      secondaryKeywords: string[]
      wordcountTarget?: number | null
      readingTime?: number | null
      difficulty?: string | null
    }
    export interface Outline {
      title?: string | null
      slug?: string | null
      cluster?: string | null
      funnel?: types.FunnelStage | null
      intent?: types.SearchIntent | null
      tpb?: types.TPBClassification | null
      targetReader?: string | null
      headings: Heading[]
      faqs: FAQ[]
      metadata?: Metadata | null
    }
    export interface Published {
      frontmatter?: Frontmatter | null
      content?: string | null
      markdownContent?: string | null
      filePath?: string | null
      backupPath?: string | null
      validation?: string | null
    }
    export interface QualityMetrics {
      readabilityGrade?: number | null
      fleschKincaidScore?: number | null
      averageSentenceLength?: number | null
      passiveVoicePercent?: number | null
      keywordDensity?: string | null
      brandVoiceAlignment?: string | null
      toneAlignment?: string | null
    }
    export interface SEOOptimizations {
      titleOptimized?: boolean | null
      metaDescriptionOptimized?: boolean | null
      schemaMarkupGenerated?: boolean | null
      ctaIncluded?: boolean | null
      keywordDensityOptimized?: boolean | null
    }
}